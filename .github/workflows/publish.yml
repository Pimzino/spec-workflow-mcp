name: Publish Package to GitHub Packages

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (leave empty for AI-determined version, or specify: major, minor, patch, or exact version)"
        required: false
      use_ai:
        description: "Use Claude AI to determine version bump (yes/no)"
        required: false
        default: "yes"

jobs:
  publish:
    runs-on: ubuntu-latest
    # Skip if commit is from workflow bot with version bump pattern
    if: |
      !contains(github.event.head_commit.message, '[workflow:version-bump]')
    permissions:
      contents: write # Needed for version commits
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0 # Fetch all history and tags for version analysis
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: "22.13.1"
          registry-url: "https://npm.pkg.github.com"
          scope: "@uniswap"

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Determine version bump using Claude AI
        if: (github.event_name == 'push' || (github.event.inputs.use_ai == 'yes' && github.event.inputs.version == ''))
        id: ai_version
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "Analyzing changes with Claude AI..."
          VERSION_BUMP=$(node .github/scripts/analyze-version-bump.js)
          echo "AI recommended version bump: $VERSION_BUMP"
          echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT

      - name: Update version based on input or AI recommendation
        id: version_update
        run: |
          # Store the old version
          OLD_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $OLD_VERSION"
          
          # Determine what version bump to apply
          VERSION_CHANGED=false
          
          # If manual version is provided
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION_INPUT="${{ github.event.inputs.version }}"

            # Check if it's a bump type or exact version
            if [[ "$VERSION_INPUT" =~ ^(major|minor|patch)$ ]]; then
              echo "Bumping $VERSION_INPUT version..."
              npm version $VERSION_INPUT --no-git-tag-version
            else
              echo "Setting exact version: $VERSION_INPUT"
              npm version $VERSION_INPUT --no-git-tag-version
            fi
            VERSION_CHANGED=true
          # If AI recommendation is available
          elif [ -n "${{ steps.ai_version.outputs.version_bump }}" ]; then
            echo "Applying AI-recommended ${{ steps.ai_version.outputs.version_bump }} version bump..."
            npm version ${{ steps.ai_version.outputs.version_bump }} --no-git-tag-version
            VERSION_CHANGED=true
          else
            echo "No version change specified, using current version from package.json"
          fi
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # Output for later steps
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_changed=$VERSION_CHANGED" >> $GITHUB_OUTPUT

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and push version changes
        if: steps.version_update.outputs.version_changed == 'true' && github.event_name != 'release'
        run: |
          # Add the changed files
          git add package.json package-lock.json
          
          # Commit with standardized message to prevent infinite loop
          git commit -m "chore: bump version to ${{ steps.version_update.outputs.new_version }} [workflow:version-bump]" || echo "No changes to commit"
          
          # Create a tag for the new version
          git tag -a "v${{ steps.version_update.outputs.new_version }}" -m "Release v${{ steps.version_update.outputs.new_version }}"
          
          # Push changes and tags
          git push origin HEAD:main --follow-tags
